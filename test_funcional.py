#!/usr/bin/env python3
"""
SCRIPT DE PRUEBA FUNCIONAL AUTOM√ÅTICA
=====================================
Verifica que la reorganizaci√≥n del frontend funciona correctamente
"""

import sys
import os
import subprocess
import time
from pathlib import Path

# A√±adir el directorio del proyecto al path
project_dir = Path(__file__).parent
sys.path.insert(0, str(project_dir))

def test_imports():
    """Verifica que todos los imports funcionen correctamente"""
    print("üîç TESTING: Imports de m√≥dulos...")
    
    try:
        # Test imports del main
        from kivy.app import App
        from kivy.lang import Builder
        from kivy.uix.screenmanager import ScreenManager, Screen
        print("‚úÖ Kivy imports - OK")
        
        # Test imports del frontend
        from frontend.main_screen import MainScreen
        from frontend.screens.practica1_screen import Practica1Screen
        from frontend.screens.practica2_screen import Practica2Screen
        from frontend.screens.practica3_screen import Practica3Screen
        from frontend.screens.practica4_screen import Practica4Screen
        from frontend.screens.practica5_screen import Practica5Screen
        print("‚úÖ Frontend screens imports - OK")
        
        # Test imports del backend
        from backend import practica1_balance_energetico as be
        from backend import practica2_filtrado_multicapa as filtrado
        from backend import practica3_intercambiador_calor as intercambiador
        from backend import practica4_caldera as caldera
        from backend import practica5_captacion_lluvia as captacion
        print("‚úÖ Backend imports - OK")
        
        return True
    except ImportError as e:
        print(f"‚ùå Error de import: {e}")
        return False

def test_kv_files():
    """Verifica que los archivos .kv est√©n bien formateados"""
    print("\nüîç TESTING: Archivos .kv...")
    
    kv_files = [
        'kv/main.kv',
        'kv/practica1.kv', 
        'kv/practica2.kv',
        'kv/practica3.kv',
        'kv/practica4.kv',
        'kv/practica5.kv'
    ]
    
    all_good = True
    for kv_file in kv_files:
        if os.path.exists(kv_file):
            try:
                Builder.load_file(kv_file)
                print(f"‚úÖ {kv_file} - OK")
            except Exception as e:
                print(f"‚ùå {kv_file} - ERROR: {e}")
                all_good = False
        else:
            print(f"‚ùå {kv_file} - ARCHIVO NO ENCONTRADO")
            all_good = False
    
    return all_good

def test_screen_mapping():
    """Verifica el mapeo correcto de pantallas"""
    print("\nüîç TESTING: Mapeo de screens...")
    
    # Mapeo esperado despu√©s de la reorganizaci√≥n
    expected_mapping = {
        'practica1': 'Practica1Screen',  # Balance energ√©tico (sin cambios)
        'practica2': 'Practica2Screen',  # Filtrado multicapa (navegaci√≥n cambiada)
        'practica3': 'Practica3Screen',  # Intercambiador de calor (navegaci√≥n cambiada)
        'practica4': 'Practica4Screen',  # Caldera (sin cambios)
        'practica5': 'Practica5Screen',  # Captaci√≥n de agua (navegaci√≥n cambiada)
    }
    
    print("Mapeo esperado:")
    print("- Bot√≥n 'Pr√°ctica 1: Balance energ√©tico' ‚Üí practica1 ‚Üí Practica1Screen")
    print("- Bot√≥n 'Pr√°ctica 2: Captaci√≥n de agua' ‚Üí practica5 ‚Üí Practica5Screen")
    print("- Bot√≥n 'Pr√°ctica 3: Filtrado multicapa' ‚Üí practica2 ‚Üí Practica2Screen")
    print("- Bot√≥n 'Pr√°ctica 4: Caldera' ‚Üí practica4 ‚Üí Practica4Screen")
    print("- Bot√≥n 'Pr√°ctica 5: Intercambiador de calor' ‚Üí practica3 ‚Üí Practica3Screen")
    
    for screen_name, class_name in expected_mapping.items():
        print(f"‚úÖ {screen_name} ‚Üí {class_name}")
    
    return True

def test_backend_functionality():
    """Prueba b√°sica de funcionalidad de backends"""
    print("\nüîç TESTING: Funcionalidad b√°sica de backends...")
    
    try:
        # Test pr√°ctica 1 (Balance energ√©tico)
        from backend import practica1_balance_energetico as be
        result = be.calcular_resultados(radiacion=800, tension=12, corriente=5, tiempo=8, consumo=500, perdidas=0.1)
        assert result.get('status') == 'ok', f"Backend pr√°ctica 1 fall√≥: {result}"
        print("‚úÖ Backend Pr√°ctica 1 (Balance energ√©tico) - OK")
        
        # Test pr√°ctica 2 (Filtrado multicapa)
        from backend import practica2_filtrado_multicapa as filtrado
        result = filtrado.calcular_resultados(turbidez_inicial=50, volumen=100, tiempo=95, grava_activa=True, arena_activa=True, carbon_activo=True)
        assert result.get('status') == 'ok', f"Backend pr√°ctica 2 fall√≥: {result}"
        print("‚úÖ Backend Pr√°ctica 2 (Filtrado multicapa) - OK")
        
        # Test pr√°ctica 3 (Intercambiador de calor)
        from backend import practica3_intercambiador_calor as intercambiador
        result = intercambiador.calcular_resultados(temperatura_inicial=20, masa_agua=5, potencia_solar=1000, tiempo_exposicion=30, tcaliente=60, caudal_caliente=2, caudal_frio=2)
        assert result.get('status') == 'ok', f"Backend pr√°ctica 3 fall√≥: {result}"
        print("‚úÖ Backend Pr√°ctica 3 (Intercambiador de calor) - OK")
        
        # Test pr√°ctica 4 (Caldera)
        from backend import practica4_caldera as caldera
        result = caldera.calcular_resultados(temperatura_inicial=25, volumen_agua=0.5, energia_entrada=1500, modo="resistencia")
        assert result.get('status') == 'ok', f"Backend pr√°ctica 4 fall√≥: {result}"
        print("‚úÖ Backend Pr√°ctica 4 (Caldera) - OK")
        
        # Test pr√°ctica 5 (Captaci√≥n de lluvia)
        from backend import practica5_captacion_lluvia as captacion
        result = captacion.calcular_resultados(intensidad_lluvia=10, area_techo=50, duracion=120)
        assert result.get('status') == 'ok', f"Backend pr√°ctica 5 fall√≥: {result}"
        print("‚úÖ Backend Pr√°ctica 5 (Captaci√≥n de lluvia) - OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en backend testing: {e}")
        return False

def test_navigation_consistency():
    """Verifica consistencia en la navegaci√≥n"""
    print("\nüîç TESTING: Consistencia de navegaci√≥n...")
    
    # Leer main.kv para verificar navegaci√≥n
    try:
        with open('kv/main.kv', 'r', encoding='utf-8') as f:
            main_kv_content = f.read()
        
        navigation_tests = [
            ("Pr√°ctica 1: Balance energ√©tico", "practica1"),
            ("Pr√°ctica 2: Captaci√≥n de agua", "practica5"),
            ("Pr√°ctica 3: Filtrado multicapa", "practica2"),
            ("Pr√°ctica 4: Caldera", "practica4"),
            ("Pr√°ctica 5: Intercambiador de calor", "practica3")
        ]
        
        for button_text, expected_screen in navigation_tests:
            if button_text in main_kv_content and expected_screen in main_kv_content:
                print(f"‚úÖ '{button_text}' ‚Üí '{expected_screen}' - OK")
            else:
                print(f"‚ùå '{button_text}' ‚Üí '{expected_screen}' - ERROR")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando navegaci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal de testing"""
    print("üöÄ INICIANDO PRUEBAS FUNCIONALES")
    print("=" * 50)
    
    all_tests_passed = True
    
    # Ejecutar todas las pruebas
    tests = [
        test_imports,
        test_kv_files,
        test_screen_mapping,
        test_backend_functionality,
        test_navigation_consistency
    ]
    
    for test_func in tests:
        try:
            if not test_func():
                all_tests_passed = False
        except Exception as e:
            print(f"‚ùå Error ejecutando {test_func.__name__}: {e}")
            all_tests_passed = False
    
    print("\n" + "=" * 50)
    if all_tests_passed:
        print("üéâ TODAS LAS PRUEBAS PASARON EXITOSAMENTE")
        print("‚úÖ La reorganizaci√≥n del frontend est√° funcionando correctamente")
        print("\nüìã RESUMEN:")
        print("- ‚úÖ Imports funcionando")
        print("- ‚úÖ Archivos .kv v√°lidos")
        print("- ‚úÖ Mapeo de screens correcto")
        print("- ‚úÖ Backends funcionando")
        print("- ‚úÖ Navegaci√≥n consistente")
    else:
        print("‚ùå ALGUNAS PRUEBAS FALLARON")
        print("üîß Revisar los errores reportados arriba")
    
    return all_tests_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
