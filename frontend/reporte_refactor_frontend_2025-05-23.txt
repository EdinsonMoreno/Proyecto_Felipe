REPORTE DE REFACTORIZACIÓN Y MEJORAS FRONTEND - KIVY
Fecha: 23/05/2025

Resumen de cambios aplicados:
---------------------------

1. Validación de entradas en todas las pantallas de prácticas:
   - Se agregó validación estricta de datos numéricos en los campos de entrada (TextInput) de cada práctica.
   - Si el usuario ingresa un valor no numérico o fuera de rango, se muestra un mensaje de error y no se ejecuta la simulación.

2. Manejo estructurado de errores del backend:
   - Todas las llamadas a funciones del backend ahora verifican el campo 'status' en la respuesta.
   - Si ocurre un error, se muestra el mensaje correspondiente al usuario mediante un Popup y se limpian los resultados.

3. Función mostrar_error unificada:
   - Se implementó la función mostrar_error en cada pantalla, utilizando Popup para mostrar mensajes de error de forma clara y consistente.
   - Esto mejora la experiencia de usuario y la robustez ante fallos.

4. Seguridad y buenas prácticas:
   - Se eliminó cualquier posibilidad de ejecución de código arbitrario (no se usa eval, exec ni manipulación insegura de datos).
   - Los botones de simulación solo procesan si los datos son válidos.
   - No se exponen errores internos del sistema en consola ni en la interfaz.

5. Consistencia visual y de interacción:
   - Se mantuvo la estructura visual y de interacción en todas las pantallas, usando los mismos componentes para inputs, resultados y errores.
   - Se garantiza una experiencia homogénea y profesional en toda la aplicación.

6. Optimización de la interfaz:
   - Se evita la creación innecesaria de widgets y se asegura la fluidez de la UI.
   - Se preparó la estructura para reutilizar layouts y componentes comunes en el futuro.

Archivos modificados:
---------------------
- frontend/screens/practica1_screen.py
- frontend/screens/practica2_screen.py
- frontend/screens/practica3_screen.py
- frontend/screens/practica4_screen.py
- frontend/screens/practica5_screen.py

Todos los cambios cumplen con las restricciones de seguridad, compatibilidad y estilo institucional.

Fin del reporte.

REPORTE DE REFACTORIZACIÓN BACKEND - SIMULACIÓN DETERMINISTA Y REACTIVA
=======================================================================

Fecha: 23/05/2025
Responsable: GitHub Copilot

Resumen de cambios:
-------------------
Se refactorizaron los módulos backend de las prácticas 1 a 5 para garantizar que:
- Todas las funciones de cálculo reciben explícitamente los valores de entrada como parámetros.
- No se usan variables globales, caché ni valores precargados para los cálculos principales.
- Cada vez que el usuario presiona “Simular”, los resultados reflejan exactamente los valores actuales ingresados.
- Se eliminó cualquier fuente de aleatoriedad o indeterminismo en los resultados.

Detalles por práctica:
----------------------
- **Práctica 1:**
  - La función `calcular_resultados(radiacion, tension, corriente, tiempo)` usa solo los parámetros recibidos.
- **Práctica 2:**
  - La función `calcular_resultados(turbidez_inicial, volumen, tiempo)` es completamente reactiva.
- **Práctica 3:**
  - La función `calcular_resultados(temperatura_inicial, masa_agua, potencia_solar, tiempo_exposicion)` depende solo de los argumentos.
- **Práctica 4:**
  - La función `calcular_resultados(temperatura_inicial, volumen_agua, energia_entrada, modo)` es determinista y no usa estado global.
- **Práctica 5:**
  - La función `calcular_resultados(intensidad_lluvia, area_techo, duracion)` calcula todo en tiempo real a partir de los inputs.

Impacto esperado:
-----------------
- Los resultados de simulación serán siempre idénticos para los mismos valores de entrada.
- El frontend debe asegurarse de pasar los valores actuales del usuario en cada llamada a la función de cálculo.
- Se elimina la posibilidad de resultados incoherentes o inconsistentes en evaluaciones y demostraciones.

Recomendaciones para el frontend:
---------------------------------
- Verificar que el botón “Simular” o equivalente pase siempre los valores actuales de los campos de entrada a la función de backend.
- No depender de variables globales ni de estado previo para mostrar resultados.

Notas adicionales:
------------------
- Si se requiere una opción de simulación con ruido o aleatoriedad, debe implementarse como parámetro explícito (por ejemplo, `modo_aleatorio=True`).
- Toda la lógica de simulación es ahora apta para uso académico, validación y auditoría.

Fin del reporte.
